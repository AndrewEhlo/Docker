name: scan
on:
  workflow_dispatch:
  pull_request:
    branches:
      [dev]
jobs:
  build:
    name: Scan
    runs-on: ubuntu-20.04
    env:
      # tag: '3.809.0-alpha.12863-dev-06cf1fbb'
      tag: '3.818.0-8a4fba1e'
      containerRegistry: 'ghcr.io/virtocommerce/virtostart'
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          #image-ref: 'ghcr.io/virtocommerce/platform:${{ env.tag }}'
          image-ref: '${{ env.containerRegistry }}:${{ env.tag }}'
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: './${{ env.tag }}.json'
      - name: Publish file
        uses: actions/upload-artifact@v4
        with:
          name: '${{ env.tag }}.json'
          path: './${{ env.tag }}.json'
      - name: Process results
        id: trivyResult
        shell: pwsh
        run: |
          $report = Get-Content './${{ env.tag }}.json' -Raw | ConvertFrom-Json
          $reportHash = @{}
          foreach ($vulnerability in $report.Results) {
            if ($Null -ne $vulnerability.Vulnerabilities.PkgName -and $reportHash.Keys -notcontains "[$($vulnerability.Vulnerabilities.Severity)] $($vulnerability.Vulnerabilities.PkgName)"){
                if ($vulnerability.Vulnerabilities.PkgName.GetType().Name -eq 'String' -and $reportHash.Keys -notcontains $vulnerability.Vulnerabilities.PkgName){
                    $reportHash.Add("[$($vulnerability.Vulnerabilities.Severity)] $($vulnerability.Vulnerabilities.PkgName)","$($vulnerability.Vulnerabilities.FixedVersion)<br />")
                } else {
                    $i = 0
                    while ($i -lt $vulnerability.Vulnerabilities.PkgName.Length) {
                        if ($reportHash.Keys -notcontains "[$($vulnerability.Vulnerabilities.Severity[$i])] $($vulnerability.Vulnerabilities.PkgName[$i])"){
                            $reportHash.Add( "[$($vulnerability.Vulnerabilities.Severity[$i])] $($vulnerability.Vulnerabilities.PkgName[$i])","$($vulnerability.Vulnerabilities.FixedVersion[$i])<br />")
                        }
                        $i += 1
                    }
                }
            }
          }
          $text = @()
          $array = @()
          $reportHash.keys | Sort-Object Name | ForEach-Object{
            $text += '{0} : {1}' -f $_, $reportHash[$_]
          }
          $reportHash.GetEnumerator() | ForEach-Object {
              $array += "$($_.Key): $($_.Value)<br>"
          }
          # echo "::set-output name=VULN_PACKAGES::$text"
          echo "VULN_PACKAGES=$text" >> $env:GITHUB_OUTPUT
          echo "REPORT_HASH=$array" >> $env:GITHUB_OUTPUT
    
      - shell: pwsh
        if: ${{ steps.trivyResult.outputs.VULN_PACKAGES != '' }} 
        run: |
          $labels = $labelsList = @()
          echo "Getting the list of labels"
          $labels = $(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/labels) | convertFrom-Json
          foreach ($l in $labels){
            $labelsList += $l.Name
          }
          echo "Labels found: $labelsList"
          echo "Checking 'VULNERABILITY' label to exist"
          if ($labelsList -notcontains 'VULNERABILITY'){
            echo "Creating 'VULNERABILITY' label "
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/labels -f "name=VULNERABILITY" -f "description=Docker image vulnerabilities found on `Run Trivy vulnerability scanner` step." -f "color=f29513"
          }
          $ref = "${{ GITHUB.REF_NAME }}"
          $PRnumber = $ref.Split("/")[0]
          echo "Set new comment body and label to PR"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/$PRnumber/comments -f "body=[SEVERITY] PackageName Version(s)WithFix<br/>------<br/>${{ steps.trivyResult.outputs.VULN_PACKAGES }}" -f "labels[]=VULNERABILITY"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/$PRnumber -f "labels[]=VULNERABILITY"

      # - uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0
      # - shell: pwsh
      #   run: |
      #     git branch --all --list
      #     $branchList = git branch --all --list '*/main'
      #     if ($Null -ne $branchList) {
      #       $branchMain = $branchList.Replace(' ','')
      #       if ($branchMain -eq 'remotes/origin/main') {
      #         $branchMain = 'main'
      #       }
      #     } else {
      #       $branchMain = 'master'
      #     }
      #     echo "MainBranch = $branchMain"

      - name: Login
        uses: atlassian/gajira-login@v2.0.0
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      
      # - name: Create
      #   id: create
      #   uses: tomhjp/gh-action-jira-create@v0.2.1
      #   with:
      #     project: VDS
      #     issuetype: "Task"
      #     summary: "Docker image vulnerabilities have been found"
      #     description: "Scanned image: ${{ env.containerRegistry }}:${{ env.tag }}\n\n------\n\n[SEVERITY] PackageName : Version(s)WithFix\n\n------\n\n${{ steps.trivyResult.outputs.VULN_PACKAGES }}"

      - name: Comment
        uses: tomhjp/gh-action-jira-comment@v0.2.0
        with:
          issue: VDS-3406
          comment: "Scanned image: ${{ env.containerRegistry }}:${{ env.tag }}\n\n------\n\n[SEVERITY] PackageName : Version(s)WithFix\n\n------\n\n${{ steps.trivyResult.outputs.REPORT_HASH }}"
      
      - name: Log
        run: echo "Created issue ${{ steps.create.outputs.issue }}"
