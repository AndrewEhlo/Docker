name: scan
on:
  workflow_dispatch:
  pull_request:
    branches:
      [dev]
jobs:
  build:
    name: Scan
    runs-on: ubuntu-20.04
    env:
      tag: '3.809.0-alpha.12863-dev-06cf1fbb'
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          #image-ref: 'ghcr.io/virtocommerce/platform:${{ env.tag }}'
          image-ref: 'ghcr.io/virtocommerce/virtostart:3.818.0-8a4fba1e'
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          output: './${{ env.tag }}.json'
          
      # - run: |
      #     cat './${{ env.tag }}.json'
      
      - name: Publish file
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.tag }}.json'
          path: './${{ env.tag }}.json'
      - name: Process results
        id: trivyResult
        shell: pwsh
        run: |
          $report = Get-Content './${{ env.tag }}.json' -Raw | ConvertFrom-Json
          if ($report -ne ''){
            $reportHash = @{}
            foreach ($vulnerability in $report.Results) {
              if ($Null -ne $vulnerability.Vulnerabilities.PkgName -and $reportHash.Keys -notcontains $vulnerability.Vulnerabilities.PkgName){
                  $reportHash.Add($($vulnerability.Vulnerabilities.PkgName),$($vulnerability.Vulnerabilities.FixedVersion))
                  # $reportHash
              }
          }
            $packages = $reportHash.GetEnumerator() | Sort-Object Name
            echo "::set-output name=VULN_PACKAGES::$packages"
          }
      # - run: |
      #     echo "VULN_PACKAGES: ${{ steps.trivyResult.outputs.VULN_PACKAGES }}"

          
      # - name: Post comment
      #   if: ${{ github.event_name == 'pull_request' }}
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const ref = github.context.ref;
      #       const PRnumber = ref.split("/")[0];
      #       github.rest.issues.createComment({
      #         issue_number: PRnumber,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: ${{ steps.trivyResult.outputs.VULN_PACKAGES }}
      #       })
      # - name: Block merge
      #   if: ${{ github.event_name == 'pull_request' }}
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const response = await github.rest.issues.addLabels({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         labels: ["name=Vulnerabilities found!","color=f29513"]
      #       });
      #       console.log(response);
      - shell: pwsh
        # if: ${{ steps.trivyResult.outputs.VULN_PACKAGES != '' }} 
        run: |
          $labels = @()
          try {
            $labels = gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/labels | convertFrom-Json
            $labels[0].Name
            $labelsList = @()
            foreach ($l in $labels){
              $labelsList += $l.Name
            }
           } catch { echo "Label exists $labels" }
          if ($labelsList -notcontains 'VULNERABILITY'){
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/labels -f "name=VULNERABILITY" -f "description=Docker image vulnerabilities found on `Run Trivy vulnerability scanner` step." -f "color=f29513"
          }
          $ref = "${{ GITHUB.REF_NAME }}"
          $PRnumber = $ref.Split("/")[0]
          gh api `
            --method PATCH `
            -H "Accept: application/vnd.github+json" `
            -H "X-GitHub-Api-Version: 2022-11-28" `
            /repos/${{ github.repository }}/issues/$PRnumber `
             -f "title=Docker image vulnerabilities found. " -f "body=[PackageName FixedVersion] ${{ steps.trivyResult.outputs.VULN_PACKAGES }}" -f "labels[]=VULNERABILITY"
          # try {
          #   gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/$PRnumber/labels -f "labels[]=VULNERABILITY"
          # } catch { echo "Failed to add label" }
          
          
